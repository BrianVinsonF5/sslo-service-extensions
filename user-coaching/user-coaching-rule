## SSL Orchestrator Service Extension - User Coaching
## Version: 2.1
## Date: 2025 Mar 10
## Author: Kevin Stewart, F5 Networks

when RULE_INIT {
    
    ## ===========================================
    ## BLOCKING CATEGORIES: Use this array to include any URL categories to trigger a blocking event.
    ## Note that blocking matches take precedence over coaching matches.
    ## Use the following TMSH command on BIG-IP to find the list of
    ## subscription categories:
    ##   tmsh list sys url-db url-category |grep "sys url-db url-category " |awk -F" " '{print $4}'
    ## ===========================================
    set static::BLOCKING_CATEGORIES {
        "/Common/Uncategorized"
        "/Common/Unknown"
    }
    
    ## ===========================================
    ## COACHING CATEGORIES: Use this array to include any URL categories to trigger a user coaching event. 
    ## Use the following TMSH command on BIG-IP to find the list of
    ## subscription categories:
    ##   tmsh list sys url-db url-category |grep "sys url-db url-category " |awk -F" " '{print $4}'
    ## ===========================================
    set static::COACHING_CATEGORIES {
        "/Common/Generative_AI"
        "/Common/Generative_AI_-_Text_&_Code"
        "/Common/Generative_AI_-_Conversation"
        "/Common/Generative_AI_-_Multimedia"
    }
    
    ## ===========================================
    ## CATEGORY TYPE: Use this option to indicate the type of category to use ("subscription", "custom_only", or "sub_and_custom").
    ## ===========================================
    set static::CATEGORY_TYPE "subscription"
    
    ## ===========================================
    ## IDENTIFIER TYPE: Use this option to indicate the type of identifier to use ("ja4" or "cookie").
    ## The JA4 method creates a local session table of unique identies and requires a JA4 TLS iRule on the -in-t-4/6 interceptoion rule VIP to perform a client TLS fingerprint.
    ## The cookie method inserts a domain cookie to the client.
    ## ===========================================
    set static::IDENTIFIER_TYPE "cookie"

    ## ===========================================
    ## COOKIE IDENT: Create an AES128 key and an arbitrary string here that will be encrypted into the cookie value (for validation) -- if the "cookie" IDENTIFIER_TYPE is used
    ## If COOKIE_KEY contains an AES key string, the cookie value (COOKIE_IDENT) will transmit encrypted using this key
    ## If COOKIE_KEY is left empty, the cookie value (COOKIE_IDENT) will transmit unencrypted
    ## Ref: https://clouddocs.f5.com/api/irules/AES.html for details on creating an AES key string
    ## ===========================================
    # set static::COOKIE_KEY "AES 128 b55c4753cba6adaa0e4ea7640504d9b4"
    set static::COOKIE_KEY ""
    set static::COOKIE_IDENT "true"

    ## ===========================================
    ## SESSION TIMER: Use this value to define the JA4 session timeout value for the user session table entry (in seconds) -- default 3600 seconds
    ## ===========================================
    set static::SESSION_TIMER 3600

    ## ===========================================
    ## BLOCKING MESSAGE: Use this string to indicate the message that will appear on the blocking page.
    ## The "THISHOST" variable is replaced at runtime with the actual HTTP Host value.
    ## ===========================================
    set static::BLOCKING_MESSAGE {
        You appear to be requesting a site <b>(THISHOST)</b> that is expressly prohibited via corporate policy. This request has been logged.
    }
    
    ## ===========================================
    ## COACHING MESSAGE: Use this string to indicate the message that will appear on the coaching page.
    ## The "THISHOST" variable is replaced at runtime with the actual HTTP Host value.
    ## ===========================================
    set static::COACHING_MESSAGE {
        You appear to be requesting a site <b>(THISHOST)</b> that may expose sensitive information to a third party. By accessing this site you consent to additional enterprise security controls. This request will be logged.
    }

    ## ===========================================
    ## REQUIRE JUSTIFICATION: Use this Boolean to require a justification in the coaching page.
    ## ===========================================
    set static::REQUIRE_JUSTIFICATION 0

    ## ===========================================
    ## LOG ENABLED: Use this Boolean option to enable/disable logging of coaching page access
    ## ===========================================
    set static::LOG_ENABLED 1

    ## ===========================================
    ## LOG POOL: Use this to indicate a remote HSL logging pool. Logging (LOG_ENABLED) must be enabled (1)
    ## ===========================================
    # set static::LOG_POOL "/Common/my_syslog_pool"
    set static::LOG_POOL ""

}

proc JUSTIFICATION { msg host hsl } {
    ## Set up message content
    set timestr [clock format [clock seconds] -format "%Y-%m-%d %H:%M:%S"]
    set usermsg "ALERT-COACHING-TRIGGER::${timestr}::client=[IP::client_addr]::host=${host}::${msg}"

    ## Set up log output
    if { $hsl ne "" } {
        ## Log to defined HSL
        HSL::send ${hsl} "<134>1 [clock format [clock seconds] -gmt 1 -format {%Y-%m-%dT%H:%M:%S.000Z}] $static::tcl_platform(machine) sslo - [TMM::cmp_count] - ${usermsg}"
    } else {
        ## Log to local syslog
        log -noname local0. $usermsg
    }
}

when CLIENT_ACCEPTED {
    if { ($static::LOG_ENABLED) && ($static::LOG_POOL ne "") } {
        set hsl [HSL::open -proto UDP -pool $static::LOG_POOL]
    } else {
        set hsl ""
    }
}

when HTTP_REQUEST priority 10 {
    ## Get ctx shared variable from SSLO (stores JA4 fingerprint)
    sharedvar ctx
    
    ## Catch and decrypt the f5se_coaching cookie
    if { [HTTP::cookie exists f5se_coaching] } {
        if { [catch {
            if { $static::COOKIE_KEY ne "" } {
                set tracker_cookie [AES::decrypt ${static::COOKIE_KEY} [b64decode [HTTP::cookie f5se_coaching]]]
            } else { 
                set tracker_cookie [HTTP::cookie f5se_coaching]
            }
        } err] } {    
            set tracker_cookie [HTTP::cookie f5se_coaching]
        }
    }

    ## Set category lookup type
    switch $static::CATEGORY_TYPE {
        "subscription" { set query_type "request_default" }
        "custom_only" { set query_type "custom"}
        "sub_and_custom" { set query_type "request_default_and_custom" }
        default { set query_type "custom" }
    }

    ## Set identifier type
    switch $static::IDENTIFIER_TYPE {
        "ja4" { set identifier "ja4" }
        "cookie" { set identifier "cookie" }
        default { set identifier "cookie" }
    }

    ## Perform a single category lookup (and test for URLDB errors)
    if { [catch {
        set cat [CATEGORY::lookup "https://[HTTP::host]/" ${query_type} -ip [IP::local_addr]]
    } err] } {
        log local0. "USER COACHING ERROR: $err"
        return
    }

    ## Coaching return handler
    if { [HTTP::uri] starts_with "/f5_handler_coaching" } {
        switch -glob [HTTP::query] {
            "uri=*" {
                HTTP::collect [HTTP::payload length]
            }
            default {
                HTTP::respond 500
            }
        }
    
    ## BLOCKING lookup: This happens first
    } elseif { ([lsearch -exact $static::BLOCKING_CATEGORIES [getfield ${cat} " " 1]] >= 0) } {
        set receive_msg [string map [list "THISHOST" "[HTTP::host]"] $static::BLOCKING_MESSAGE]
        if { $static::LOG_ENABLED } { call JUSTIFICATION "Request Blocked" [HTTP::host] ${hsl} }
        HTTP::respond 200 content  [subst -nocommands -nobackslashes [ifile get user-blocking-html]] "Connection" "close"
    
    ## COACHING lookup with cookie identifier"
    } elseif { (${identifier} eq "cookie") && 
        ([lsearch -exact $static::COACHING_CATEGORIES [getfield ${cat} " " 1]] >= 0) &&
        ((![HTTP::cookie exists f5se_coaching]) || (${tracker_cookie} ne ${static::COOKIE_IDENT})) } {
        set receive_host [HTTP::host]
        set receive_uri [URI::encode [b64encode [HTTP::host][HTTP::uri]]]
        set receive_msg [string map [list "THISHOST" "[domain [HTTP::host] 2]"] $static::COACHING_MESSAGE]
        if { $static::REQUIRE_JUSTIFICATION } { set receive_justify "enabled" } else { set receive_justify "" }
        HTTP::respond 200 content [subst -nocommands -nobackslashes [ifile get user-coaching-html]]

    ## ERROR check: Coaching with JA4 requires TLS/HTTPS and JA4 iRule -- send error and return if JA4 fingerprint is missing
    } elseif { (${identifier} eq "ja4") && (![info exists ctx(ja4)]) } {
        log local0. "USER COACHING ERROR: JA4 identifier selected but JA4 signature unavailable -- install JA4 iRule to -in-t-4/6 interception rule VIP"
        return

    ## COACHING lookup with JA4 identifier
    } elseif { (${identifier} eq "ja4") && 
        ([lsearch -exact $static::COACHING_CATEGORIES [getfield ${cat} " " 1]] >= 0) &&
        ([table lookup "[IP::client_addr]_[domain [HTTP::host] 2]_${ctx(ja4)}"] < 1) } {
        set receive_host [HTTP::host]
        set receive_uri [URI::encode [b64encode [HTTP::host][HTTP::uri]]]
        set receive_msg [string map [list "THISHOST" "[domain [HTTP::host] 2]"] $static::COACHING_MESSAGE]
        if { $static::REQUIRE_JUSTIFICATION } { set receive_justify "enabled" } else { set receive_justify "" }
        HTTP::respond 200 content [subst -nocommands -nobackslashes [ifile get user-coaching-html]]
    }
}
## COACHING return handler
when HTTP_REQUEST_DATA {
    ## Send to logger based on GET or POST data
    if { ([HTTP::uri] starts_with "/f5_handler_coaching") && ([HTTP::method] eq "POST") } {
        if { $static::LOG_ENABLED } { call JUSTIFICATION [HTTP::payload] [HTTP::host] ${hsl} }
    } else {
        if { $static::LOG_ENABLED } { call JUSTIFICATION "" [HTTP::host] ${hsl} }
    }

    ## Set persisence based on ja4 fingerprint or domain cookie
    if { ${identifier} eq "cookie" } {
        ## The cookie option manages state with a domain cookie sent to the client (optionally encrypted)
        set redir [b64decode [URI::decode [lindex [split [HTTP::query] "="] 1]]]
        if { [catch {
            if { $static::COOKIE_KEY ne "" } {
                set cookie_val [b64encode [AES::encrypt ${static::COOKIE_KEY} ${static::COOKIE_IDENT}]]
            } else { 
                set cookie_val ${static::COOKIE_IDENT}
            }
        } err] } {    
            set cookie_val ${static::COOKIE_IDENT}
        }
        set cookie [format "%s=%s; path=/; domain=%s" "f5se_coaching" "${cookie_val}" "[domain [HTTP::host] 2]"]
        HTTP::respond 302 Location "https://${redir}" "Set-Cookie" ${cookie}
    
    } elseif { ${identifier} eq "ja4" } {
        ## The JA4 option manages state with a local session table
        table set "[IP::client_addr]_[domain [HTTP::host] 2]_${ctx(ja4)}" 1 ${static::SESSION_TIMER} indef
        set redir [b64decode [URI::decode [lindex [split [HTTP::query] "="] 1]]]
        HTTP::respond 302 Location "https://${redir}"
    }
}
